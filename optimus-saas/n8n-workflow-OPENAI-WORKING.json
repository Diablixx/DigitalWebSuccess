{
  "name": "OpenAI WORKING - AI Article Generation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-article-generation",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ai-article-generation"
    },
    {
      "parameters": {
        "jsCode": "// Extract prompt from correct location\nconst inputData = $input.first();\nlet prompt = inputData.json?.prompt || inputData.body?.prompt || inputData.json?.body?.prompt || '';\n\nconsole.log('Received prompt:', prompt);\n\nif (!prompt || !prompt.trim()) {\n  return {\n    success: false,\n    title: '',\n    content: '',\n    error: 'Le prompt est requis et ne peut pas être vide',\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Return normalized data\nreturn {\n  prompt: prompt.trim()\n};"
      },
      "id": "extract-prompt",
      "name": "Extract Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sk-proj-WZcBJ_jPGAJJXXH5wpAU2eJ-xrmS5qcGLp8MNBGPywfaX6z_E8SJPzGc9-RlsY8GWXBNtqXSzaT3BlbkFJO8dPJfTKFDf1QABp5YdL4D0KpKG5Gfj7CQx_c1KfCzLl2Z7Q2EGqfUW1M1G2A3J9e7Y4r2QJZ"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-3.5-turbo-instruct\",\n  \"prompt\": \"Tu es un expert en rédaction d'articles marketing en français. Écris un article complet et engageant sur le sujet suivant : \\\"{{ $json.prompt }}\\\"\\n\\nL'article doit :\\n- Avoir un titre accrocheur (maximum 60 caractères)\\n- Contenir entre 500 et 1000 mots\\n- Être structuré avec des sous-titres\\n- Être optimisé SEO\\n- Être écrit dans un style professionnel mais accessible\\n- Inclure des conseils pratiques\\n\\nFormat de réponse :\\nTITRE: [Le titre de l'article]\\nCONTENU: [Le contenu complet de l'article avec sous-titres en markdown]\",\n  \"max_tokens\": 2000,\n  \"temperature\": 0.7\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "openai-http",
      "name": "OpenAI HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process OpenAI response\ntry {\n  const response = $input.first().json;\n  \n  if (!response.choices || !response.choices[0]) {\n    throw new Error('Invalid OpenAI response structure');\n  }\n  \n  const generatedText = response.choices[0].text;\n  console.log('Generated text:', generatedText);\n  \n  // Extract title and content\n  const titleMatch = generatedText.match(/TITRE:\\s*(.+)/i);\n  const contentMatch = generatedText.match(/CONTENU:\\s*([\\s\\S]+)/i);\n  \n  let title = '';\n  let content = '';\n  \n  if (titleMatch && titleMatch[1]) {\n    title = titleMatch[1].trim();\n    if (title.length > 60) {\n      title = title.substring(0, 57) + '...';\n    }\n  } else {\n    const lines = generatedText.split('\\n').filter(line => line.trim());\n    title = lines[0] ? lines[0].trim().substring(0, 60) : 'Article généré par IA';\n  }\n  \n  if (contentMatch && contentMatch[1]) {\n    content = contentMatch[1].trim();\n  } else {\n    content = generatedText.trim();\n  }\n  \n  content = content.replace(/^TITRE:\\s*.+$/gim, '').trim();\n  \n  const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\n  \n  return {\n    success: true,\n    title: title,\n    content: content,\n    error: null,\n    timestamp: new Date().toISOString(),\n    wordCount: wordCount,\n    characterCount: content.length\n  };\n  \n} catch (error) {\n  console.error('Processing error:', error);\n  return {\n    success: false,\n    title: '',\n    content: '',\n    error: 'Erreur lors du traitement de la réponse OpenAI: ' + error.message,\n    timestamp: new Date().toISOString()\n  };\n}"
      },
      "id": "process-response",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [720, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "id": "response-node",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [880, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Prompt": {
      "main": [
        [
          {
            "node": "OpenAI HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI HTTP Request": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}