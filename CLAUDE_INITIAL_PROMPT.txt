ðŸš€ MASSIVE OPTIMUS PROJECT INITIALIZATION PROMPT

I need your help implementing the OPTIMUS AI-powered content management system using a deployment-first methodology. This is a sophisticated dual Next.js application system that transforms keyword inputs into published articles through automated AI workflows.

ðŸ“‹ IMMEDIATE FIRST STEP REQUIRED

Read the CLAUDE.md file in this project - it contains the complete strategic documentation, methodology, and lessons learned. This documentation will give you deep understanding of:

- The deployment-first approach (critical lesson learned)
- Complete system architecture and component relationships
- Phase-by-phase implementation strategy
- Critical lessons from previous debugging sessions
- User communication preferences and workflow expectations

ðŸŽ¯ PROJECT CONTEXT OVERVIEW

OPTIMUS consists of two Next.js applications working in harmony:
- optimus-template: Public-facing French AI solutions website with dynamic BlogMegaMenu
- optimus-saas: Private admin dashboard for AI article generation and management

Complete Workflow: User enters keyword â†’ SAAS Dashboard â†’ N8N Cloud â†’ OpenAI GPT-4 â†’ Supabase Database â†’ Dynamic BlogMegaMenu â†’ Individual Article Pages

Core Technology Stack: Next.js 15 + App Router, Supabase database, N8N Cloud automation, OpenAI GPT-4, Vercel deployment, French language optimization

ðŸš¨ CRITICAL METHODOLOGY: DEPLOYMENT-FIRST

The Core Lesson: Traditional local-first development creates deployment disasters. Features work locally but break in production, leading to endless debugging cycles.

Our Approach: Deploy incrementally, testing each feature in production from day one. No surprises during final deployment.

Implementation Phases:
1. Phase 1: Basic website with empty BlogMegaMenu â†’ Deploy to Vercel FIRST
2. Phase 2: SAAS dashboard â†’ Deploy to Vercel
3. Phase 3: AI generation integration â†’ Test in production
4. Phase 4: Publication pipeline â†’ Full workflow validation

ðŸ’¡ USER COMMUNICATION PREFERENCES

- "ultrathink" approach: Comprehensive problem-solving using all available resources
- Concise responses: Maximum 4 lines unless detail explicitly requested
- Direct answers: No unnecessary preamble or explanation
- Proactive tool usage: TodoWrite for task tracking, Task agents for complex operations, parallel operations
- French content: Proper apostrophe escaping (l\'article in JS, l'article in display)
- NO HTML entities: Convert &apos; to proper apostrophes
- Navigation: Individual article access via BlogMegaMenu only, NO blog listing pages

ðŸ”§ CRITICAL COMPONENTS UNDERSTANDING

BlogMegaMenu Component (CRITICAL): Central navigation that dynamically loads articles from Supabase, handles loading/empty/error states, integrates into main navigation

useArticles Hook (CRITICAL): Custom React hook for real-time article loading, filters published articles, handles authentication and errors

Dynamic Article System: Server-side rendered pages with SEO optimization, French content handling, automatic slug generation

SAAS Dashboard: Keyword-based generation workflow, real-time editing, publication management, integration monitoring

ðŸš¨ CRITICAL LESSONS LEARNED

- Missing Component Crisis: BlogMegaMenu and useArticles components were missing, causing "JSON.parse unexpected character" errors
- Environment Variable Issues: Local environment variables work but fail in production
- N8N Integration Complexity: Test mode vs production mode data structure differences
- Source Code Exclusion: .gitignore excluding src/ directory causing deployment failures
- Build System Conflicts: SWC compiler and CSS optimization conflicts

ðŸŽ¯ PHASE 1 IMMEDIATE OBJECTIVES

Goal: Deploy basic website with empty BlogMegaMenu that shows "Aucun article disponible"

Your Tasks Right Now:

1. Read CLAUDE.md thoroughly - Understand the complete project vision and methodology

2. Create optimus-template Next.js project:
   - Use Next.js 15 with App Router
   - Include Tailwind CSS
   - Create basic French AI solutions company website structure
   - Implement BlogMegaMenu component that handles empty state gracefully
   - Create useArticles hook that fails gracefully without backend
   - Ensure all navigation and pages are functional

3. Setup GitHub repository:
   - Create new repository for the project
   - Proper .gitignore (ensuring src/ directory is NOT excluded)
   - Initial commit with basic website structure
   - Branch strategy for deployment-first approach

4. Deploy to Vercel:
   - Connect GitHub repository to Vercel
   - Configure as Next.js project
   - Ensure clean deployment with no errors
   - Verify BlogMegaMenu shows "Aucun article disponible" state
   - Test all navigation and pages work correctly

âœ… PHASE 1 SUCCESS CRITERIA

- Website builds without errors (npm run build passes)
- All pages load correctly (homepage, services, contact, formations, ressources)
- BlogMegaMenu component shows "Aucun article disponible" gracefully
- No console errors in browser
- Navigation works properly
- Clean Vercel deployment with green status
- Public URL accessible and functional

ðŸ”„ WORKFLOW EXPECTATIONS

- Use TodoWrite for task tracking throughout this process
- Mark tasks completed immediately after finishing
- Be proactive with parallel operations when possible
- Focus on deployment-ready solutions, not just local development
- Test everything in production environment (Vercel) before considering complete

ðŸš€ NEXT STEPS AFTER PHASE 1

Once Phase 1 is complete and deployed successfully:
- Phase 2: Create and deploy optimus-saas dashboard
- Phase 3: Integrate N8N and Supabase for AI generation
- Phase 4: Complete publication pipeline

IMPORTANT: Do not proceed to subsequent phases until current phase is fully operational in production environment.

ðŸ“š ADDITIONAL CONTEXT

This project was previously built but had deployment issues due to local-first development approach. We learned critical lessons about:
- Component architecture requirements
- Environment variable handling in production
- Integration complexity with external services
- Build system optimization for deployment

The CLAUDE.md file contains all these insights and the complete strategic approach for success.

START NOW: Read CLAUDE.md, then immediately begin Phase 1 implementation with deployment-first mindset.