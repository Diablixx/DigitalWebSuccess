{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "publish-article",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "0c62a866-3bcb-4e2c-b7f2-e04e7cb6970e",
      "name": "Webhook - Publish Article",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1440,
        -40
      ],
      "webhookId": "publish-article"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "articles",
        "filters": {
          "conditions": [
            {
              "keyName": "keyword",
              "keyValue": "={{ $json.body.keyword }}"
            }
          ]
        }
      },
      "id": "13024406-1b58-4ddc-9e40-53cd1770f8a6",
      "name": "Supabase - Find Article",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1220,
        -40
      ],
      "credentials": {
        "supabaseApi": {
          "id": "UUsPjxYAd0B1rCZ7",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Compare article changes\nconst webhookData = $input.first().json;\nconst existingArticle = $('Supabase - Find Article').first().json;\n\n// Extract data from webhook\nconst newTitle = $('Webhook - Publish Article').first().json.body.title;\nconst newContent = $('Webhook - Publish Article').first().json.body.content;\nconst keyword = webhookData.keyword?.trim() || '';\n\n// Extract existing data\nconst existingTitle = existingArticle.title?.trim() || '';\nconst existingContent = existingArticle.content?.trim() || '';\n\n// Check if changes were made\nconst titleChanged = newTitle !== existingTitle;\nconst contentChanged = newContent !== existingContent;\nconst hasChanges = titleChanged || contentChanged;\n\n// Log comparison for debugging\nconsole.log('üîç Article Comparison:');\nconsole.log('Keyword:', keyword);\nconsole.log('Title changed:', titleChanged);\nconsole.log('Content changed:', contentChanged);\nconsole.log('Has changes:', hasChanges);\n\nreturn {\n  keyword: keyword,\n  newTitle: newTitle,\n  newContent: newContent,\n  existingTitle: existingTitle,\n  existingContent: existingContent,\n  hasChanges: hasChanges,\n  titleChanged: titleChanged,\n  contentChanged: contentChanged,\n  articleId: existingArticle.id\n};"
      },
      "id": "8d4b2db7-2d61-4e02-8fff-2184ebd1a53e",
      "name": "Code - Compare Changes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        -40
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasChanges }}",
              "value2": true
            }
          ]
        }
      },
      "id": "deea8e21-609f-4cba-a237-50d09fe8b87f",
      "name": "IF - Changes Detected",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -640,
        -40
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "articles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.articleId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.newTitle }}"
            },
            {
              "fieldId": "content",
              "fieldValue": "={{ $json.newContent }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "7edb662f-4e5c-4f38-892b-8577ca8f0b5c",
      "name": "Supabase - Update Article",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -380,
        -140
      ],
      "credentials": {
        "supabaseApi": {
          "id": "UUsPjxYAd0B1rCZ7",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "articles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "published",
              "fieldValue": "True"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "2a743668-23f2-4325-aa23-6e01805bf4ad",
      "name": "Supabase - Set Published",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -160,
        -140
      ],
      "credentials": {
        "supabaseApi": {
          "id": "UUsPjxYAd0B1rCZ7",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the final article data from Supabase\nconst supabaseArticle = $input.first().json;\nconst webhookData = $('Webhook - Publish Article').first().json.body;\nconst compareData = $('Code - Compare Changes').first().json;\n\n// Use the most recent data (from webhook if changes, from Supabase if no changes)\nconst title = compareData.newTitle || supabaseArticle.title || '';\nconst content = compareData.newContent || supabaseArticle.content || '';\nconst slug = supabaseArticle.slug || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '') || '';\nconst excerpt = supabaseArticle.excerpt || title || '';\nconst metaDescription = supabaseArticle.meta_description || title || '';\n\n// Format content for WordPress\nlet formattedContent = content;\n\n// Add basic HTML structure if not present\nif (formattedContent && !formattedContent.includes('<p>') && !formattedContent.includes('<h')) {\n  // Split content into paragraphs\n  const paragraphs = formattedContent.split('\\n\\n').filter(p => p.trim());\n  formattedContent = paragraphs.map(p => `<p>${p.trim()}</p>`).join('\\n\\n');\n}\n\n// WordPress payload\nconst wordpressPayload = {\n  title: title,\n  content: formattedContent,\n  slug: slug,\n  excerpt: excerpt,\n  status: 'publish',\n  categories: [1], // Default to category ID 1 (usually \"Uncategorized\" or \"Blog\")\n  meta: {\n    _yoast_wpseo_metadesc: metaDescription,\n    _yoast_wpseo_title: title\n  }\n};\n\nconsole.log('üìù WordPress Payload:', {\n  title: title,\n  slug: slug,\n  contentLength: formattedContent.length,\n  status: 'publish'\n});\n\nreturn wordpressPayload;"
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Code - Format WordPress Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://admin.digitalwebsuccess.com/wp-json/wp/v2/posts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify($json) }}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "b2c3d4e5-f678-9012-bcde-f23456789012",
      "name": "HTTP - Post to WordPress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        -140
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "wordpress-api-auth",
          "name": "WordPress API Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the final article data and WordPress response\nconst wordpressResponse = $input.first().json;\nconst compareData = $('Code - Compare Changes').first().json;\nconst supabaseData = $('Supabase - Set Published').first().json || $('Supabase - Set Published (No changes)').first().json;\n\n// Return success response to Optimus\nreturn {\n  success: true,\n  message: 'Article published successfully to WordPress and Supabase',\n  keyword: compareData.keyword,\n  articleId: supabaseData.id,\n  wordpressId: wordpressResponse.id,\n  wordpressUrl: wordpressResponse.link,\n  published: true,\n  timestamp: new Date().toISOString(),\n  wordpress: {\n    id: wordpressResponse.id,\n    url: wordpressResponse.link,\n    title: wordpressResponse.title?.rendered,\n    status: wordpressResponse.status\n  }\n};"
      },
      "id": "c3d4e5f6-7890-1234-cdef-345678901234",
      "name": "Response - WordPress Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -40
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle article not found error\nconst webhookData = $input.first().json;\n\nreturn {\n  success: false,\n  error: 'Article not found',\n  message: `No article found with keyword: ${webhookData.keyword}`,\n  keyword: webhookData.keyword,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "d1325bea-6b80-4211-88e7-94582c37239c",
      "name": "Error - Article Not Found",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.content }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "7ead96eb-7a1d-4ace-afe9-3df0dcf12fd3",
      "name": "IF - Article Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1040,
        -40
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "articles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.articleId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "published",
              "fieldValue": "True"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "id": "e6b14fef-1205-4957-8686-1e36fdc4ca8f",
      "name": "Supabase - Set Published (No changes)",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -260,
        120
      ],
      "credentials": {
        "supabaseApi": {
          "id": "UUsPjxYAd0B1rCZ7",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format WordPress data for no-changes path\nconst supabaseArticle = $input.first().json;\nconst compareData = $('Code - Compare Changes').first().json;\n\nconst title = supabaseArticle.title || '';\nconst content = supabaseArticle.content || '';\nconst slug = supabaseArticle.slug || title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '') || '';\nconst excerpt = supabaseArticle.excerpt || title || '';\nconst metaDescription = supabaseArticle.meta_description || title || '';\n\n// Format content for WordPress\nlet formattedContent = content;\n\n// Add basic HTML structure if not present\nif (formattedContent && !formattedContent.includes('<p>') && !formattedContent.includes('<h')) {\n  const paragraphs = formattedContent.split('\\n\\n').filter(p => p.trim());\n  formattedContent = paragraphs.map(p => `<p>${p.trim()}</p>`).join('\\n\\n');\n}\n\n// WordPress payload\nconst wordpressPayload = {\n  title: title,\n  content: formattedContent,\n  slug: slug,\n  excerpt: excerpt,\n  status: 'publish',\n  categories: [1],\n  meta: {\n    _yoast_wpseo_metadesc: metaDescription,\n    _yoast_wpseo_title: title\n  }\n};\n\nconsole.log('üìù WordPress Payload (No Changes):', {\n  title: title,\n  slug: slug,\n  contentLength: formattedContent.length,\n  status: 'publish'\n});\n\nreturn wordpressPayload;"
      },
      "id": "f4e5d6c7-8901-2345-defg-456789012345",
      "name": "Code - Format WordPress Data (No changes)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        120
      ]
    }
  ],
  "connections": {
    "Webhook - Publish Article": {
      "main": [
        [
          {
            "node": "Supabase - Find Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Find Article": {
      "main": [
        [
          {
            "node": "IF - Article Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Compare Changes": {
      "main": [
        [
          {
            "node": "IF - Changes Detected",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Changes Detected": {
      "main": [
        [
          {
            "node": "Supabase - Update Article",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase - Set Published (No changes)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Update Article": {
      "main": [
        [
          {
            "node": "Supabase - Set Published",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Set Published": {
      "main": [
        [
          {
            "node": "Code - Format WordPress Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format WordPress Data": {
      "main": [
        [
          {
            "node": "HTTP - Post to WordPress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Post to WordPress": {
      "main": [
        [
          {
            "node": "Response - WordPress Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Article Exists": {
      "main": [
        [
          {
            "node": "Code - Compare Changes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error - Article Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase - Set Published (No changes)": {
      "main": [
        [
          {
            "node": "Code - Format WordPress Data (No changes)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Format WordPress Data (No changes)": {
      "main": [
        [
          {
            "node": "HTTP - Post to WordPress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fbc39d4741073daceb575c6bc0bb1f58bf694a3db83148c2d5445cf013d2eabf"
  }
}